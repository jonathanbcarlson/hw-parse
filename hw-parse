#!/usr/bin/env python3
import argparse
from pdfminer.high_level import extract_text
from dotenv import dotenv_values
import datetime as dt

"""config = {
    **dotenv_values(".env.PREAMBLE_PATH")
    **dotenv_values(".env.AUTHOR_NAME")
}
"""
config = dotenv_values(".env")

def add_preamble(output, class_name, hw_num, date):
  output += f"\\input{{{config['PREAMBLE_PATH']}}}\n"
  output += '\\title{' + f'{class_name}'.title() + ' - Homework' + f' {hw_num}' + '}\n'
  output += f'\\date{{{date}}}\n'
  output += f"\\author{{{config['AUTHOR_NAME']}}}\n"
  output += "\n\\begin{document}\n"
  output += "\\maketitle\n\n"
  return output

def parse_section(line, section_problems, line_num, content):
    next_section = None
    # remove section
    sec_line = line[len('Section'):]
    section_in_line, sec_line = sec_line.split(':')
    section_in_line = section_in_line.strip()
    sec_line = sec_line.strip()
    section_problems[section_in_line] = []
    if "Problems" in sec_line:
      # remove problems
      problems = sec_line[len('Problems'):]
      problems.strip()
      problems = problems.split(',')
      for problem in problems:
        problem = problem.strip()
        if "and" in problem:
          if problem == 'and':
            # the last problem number is on the next new line
            last_problem = content[line_num+1][:content[line_num+1].find('Section')]
            next_section = content[line_num+1][content[line_num+1].find('Section'):]
            # strip and remove period
            problem = last_problem.strip()[:-1]
          else:
            # remove and and ending period
            problem = problem[len('and'):-1]
            problem = problem.strip()
        section_problems[section_in_line].append(problem)
    return section_problems, next_section

parser = argparse.ArgumentParser(description='Create TeX from HW spec')
parser.add_argument('hw_pdf', type=str, help='Path to HW pdf')
parser.add_argument('class_name', type=str, help='The class the HW is for')
# source for how to have bool arg
# https://stackoverflow.com/questions/15008758/parsing-boolean-values-with-argparse
parser.add_argument('--verbose', '-v', dest='verbose', action='store_true',  help='Print out finalized output')
parser.add_argument('--dry-run', '-d', dest='dry_run', action='store_true',  help='Only print out finalized output, do not write to tex file')
parser.set_defaults(verbose=False)
parser.set_defaults(dry_run=False)
args = parser.parse_args()

class_name = args.class_name
class_num = class_name.split(' ')[1]
filename = args.hw_pdf

content = extract_text(filename)

content = content.split('\n')
content = [c for c in content if c != '']

homework_checks = ['HW', 'Homework' 'hw', 'Hw']

found_hw_num = False
for line in content:
  if found_hw_num:
    break
  for check in homework_checks:
    if check in line:
      # assume homework number is the next word after the check
      # in the form: '$check hw_num'
      hw_num = line[line.find(check)+len(check)+1]
      break
    else:
      continue
if hw_num is None:
  raise ValueError(f"Can't find homework number in the pdf file provided: {filename}")
output_filename = f'{class_num}_hw{hw_num}.tex'
output = ''

section_problems = {}
date = ''
next_section = None

for line_num, line in enumerate(content):
  if "Due" in line:
    # remove Duedate
    date = line.split('date')[1]
    # TODO: use Todoist/task warrior api to add as hw
    month_day, time =  date.split('at')
    # remove spaces
    month_day = month_day.strip()
    # drop rd, th, nd from date (3rd, 4th, 2nd)
    month_day = month_day[:-2]
    month_day_dt = dt.datetime.strptime(month_day, "%B %d")
    # change year to current year
    current_year = int(dt.datetime.today().strftime("%Y"))
    month_day_dt = month_day_dt.replace(year=current_year)
    date = month_day_dt.strftime('%B %d, %Y')
    # now that we have date, we can add our preamble
    output = add_preamble(output, class_name=class_name, hw_num=hw_num, date=date)
  section_in_line = None
  if "Section" in line and next_section is None:
      section_problems, next_section = parse_section(line,
          section_problems, line_num, content)
  elif next_section is not None:
      section_problems, next_section = parse_section(next_section,
           section_problems, line_num, content)
  else:
    continue

for sec in section_problems.keys():
  output += '\section*{Section' + f' {sec}' + '}\n'
  for prob in section_problems[sec]:
    output += f'\problem{{{sec}}}{{{prob}}}\n'
output += '\n\\end{document}'
if args.verbose or args.dry_run:
  print('Filename=', output_filename, '\n')
  print('TeX:\n')
  print(output)
if not args.dry_run:
  with open(output_filename, 'w') as f:
    f.write(output)
